{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","colorClass","colorArray","row","col","className","onClick","handleClick","TableRow","element","i","numCols","push","Table","numRows","App","addRow","newRow","Array","from","length","state","map","x","defaultColor","setState","concat","console","log","addCol","newArr","removeRow","slice","alert","removeCol","updateSelectedColor","e","currentColor","target","value","fillAll","clearAll","fillUncolored","j","array","this","onChange","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69082bdb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TableCell(props) {\r\n\tconst colorClass = props.colorArray[props.row][props.col];\r\n\treturn (\r\n\t\t<td\r\n\t\t\tclassName={colorClass}\r\n\t\t\tonClick={() => props.handleClick(props.row, props.col)}\r\n\t\t>\r\n\t\t\tcell\r\n\t\t</td>\r\n\t);\r\n}\r\n\r\nexport default TableCell;\r\n","import React from \"react\";\r\nimport TableCell from \"./TableCell\";\r\n\r\nfunction TableRow(props) {\r\n\tlet element = [];\r\n\tfor (let i = 0; i < props.numCols; ++i) {\r\n\t\telement.push(\r\n\t\t\t<TableCell\r\n\t\t\t\trow={props.row}\r\n\t\t\t\tcol={i}\r\n\t\t\t\tcolorArray={props.colorArray}\r\n\t\t\t\thandleClick={props.handleClick}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn <tr>{element}</tr>;\r\n}\r\n\r\nexport default TableRow;\r\n","import React from \"react\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nfunction Table(props) {\r\n\tlet element = [];\r\n\tfor (let i = 0; i < props.numRows; ++i) {\r\n\t\telement.push(\r\n\t\t\t<TableRow\r\n\t\t\t\tnumCols={props.numCols}\r\n\t\t\t\trow={i}\r\n\t\t\t\tcolorArray={props.colorArray}\r\n\t\t\t\thandleClick={props.handleClick}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn <table>{element}</table>;\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Table } from \"./components\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst defaultColor = \"default-color\";\n\t\tconst initialRow = 2;\n\t\tconst initialCol = 3;\n\t\t// const row = Array.from({ length: initialCol }).map(x => defaultColor);\n\t\tconst array = Array.from({ length: initialRow }).map(x =>\n\t\t\tArray.from({ length: initialCol }).map(x => defaultColor)\n\t\t);\n\n\t\tthis.state = {\n\t\t\tdefaultColor: defaultColor,\n\t\t\tcurrentColor: \"red-color\",\n\t\t\tcolorArray: array\n\t\t};\n\t\tconsole.log(this.state.colorArray);\n\t}\n\n\taddRow = () => {\n\t\tconst newRow = Array.from({ length: this.state.colorArray[0].length }).map(\n\t\t\tx => this.state.defaultColor\n\t\t);\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tcolorArray: this.state.colorArray.concat([newRow])\n\t\t\t},\n\t\t\t() => console.log(this.state.colorArray)\n\t\t);\n\t};\n\n\taddCol = () => {\n\t\tlet newArr = this.state.colorArray.map(row => {\n\t\t\treturn row.concat(this.state.defaultColor);\n\t\t});\n\t\tthis.setState({\n\t\t\tcolorArray: newArr\n\t\t});\n\t};\n\n\tremoveRow = () => {\n\t\tif (this.state.colorArray.length > 1) {\n\t\t\tlet newArr = this.state.colorArray.slice(0, -1);\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tcolorArray: newArr\n\t\t\t\t},\n\t\t\t\t() => console.log(this.state.colorArray)\n\t\t\t);\n\t\t} else {\n\t\t\talert(\"Minimum rows achieved\");\n\t\t}\n\t};\n\n\tremoveCol = () => {\n\t\tif (this.state.colorArray[0].length > 1) {\n\t\t\tlet newArr = this.state.colorArray.map(row => {\n\t\t\t\treturn row.slice(0, -1);\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tcolorArray: newArr\n\t\t\t});\n\t\t} else {\n\t\t\talert(\"Minimum cols achieved\");\n\t\t}\n\t};\n\n\tupdateSelectedColor = e => {\n\t\tthis.setState({\n\t\t\tcurrentColor: e.target.value\n\t\t});\n\t};\n\n\tfillAll = () => {\n\t\tlet newArr = this.state.colorArray.map(row =>\n\t\t\trow.map(() => this.state.currentColor)\n\t\t);\n\t\tthis.setState({\n\t\t\tcolorArray: newArr\n\t\t});\n\t};\n\n\tclearAll = () => {\n\t\tlet newArr = this.state.colorArray.map(row =>\n\t\t\trow.map(() => this.state.defaultColor)\n\t\t);\n\t\tthis.setState({\n\t\t\tcolorArray: newArr\n\t\t});\n\t};\n\n\tfillUncolored = () => {\n\t\tconst { defaultColor, currentColor, colorArray } = this.state;\n\t\tlet newArr = colorArray;\n\t\tfor (let i = 0; i < colorArray.length; ++i) {\n\t\t\tfor (let j = 0; j < colorArray[0].length; ++j) {\n\t\t\t\tif (newArr[i][j] === defaultColor) {\n\t\t\t\t\tnewArr[i][j] = currentColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tcolorArray: newArr\n\t\t});\n\t};\n\n\thandleClick = (row, col) => {\n\t\tconst { currentColor, colorArray } = this.state;\n\t\tlet newArr = colorArray;\n\t\tfor (let i = 0; i < colorArray.length; ++i) {\n\t\t\tfor (let j = 0; j < colorArray[0].length; ++j) {\n\t\t\t\tif (i === row && j === col) {\n\t\t\t\t\tconsole.log(i, j);\n\t\t\t\t\tnewArr[i][j] = currentColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(newArr);\n\t\tthis.setState({\n\t\t\tcolorArray: newArr\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={this.addRow}>Add a row</button>\n\t\t\t\t<button onClick={this.addCol}>Add a col</button>\n\t\t\t\t<button onClick={this.removeRow}> Remove a row</button>\n\t\t\t\t<button onClick={this.removeCol}> Remove a col</button>\n\n\t\t\t\t<select\n\t\t\t\t\tvalue={this.state.currentColor}\n\t\t\t\t\tonChange={this.updateSelectedColor}\n\t\t\t\t>\n\t\t\t\t\t<option id=\"default\" value=\"default-color\">\n\t\t\t\t\t\tdefault\n\t\t\t\t\t</option>\n\t\t\t\t\t<option id=\"red\" value=\"red-color\">\n\t\t\t\t\t\tred\n\t\t\t\t\t</option>\n\t\t\t\t\t<option id=\"green\" value=\"green-color\">\n\t\t\t\t\t\tgreen\n\t\t\t\t\t</option>\n\t\t\t\t</select>\n\n\t\t\t\t<Table\n\t\t\t\t\tnumRows={this.state.colorArray.length}\n\t\t\t\t\tnumCols={this.state.colorArray[0].length}\n\t\t\t\t\tcolorArray={this.state.colorArray}\n\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t/>\n\n\t\t\t\t<button onClick={this.fillAll}>Fill all</button>\n\t\t\t\t<button onClick={this.clearAll}>Clear all</button>\n\t\t\t\t<button onClick={this.fillUncolored}>Fill only uncolored</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}